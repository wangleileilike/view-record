1 我们写的事件是绑定在dom上么，如果不是绑定在哪里？

	不是，react16绑定在document上进行统一管理;react17则是绑定在Root Element

2 为什么我们的事件不能绑定给组件？
	a.绑定给组件无法进行统一管理，而且还要单独处理冒泡和捕获事件
	b.react想提供一个全浏览器的框架，为了实现这中目标就需要提供全浏览器一致性的事件系统，以此抹平不同浏览器之间的差异


3 为什么我们的事件手动绑定this(不是箭头函数的情况)

	因为jxs会转化成React.createElement的形式，其中的事件会使用this获取，如果不进行绑定的话，就会获取不到

4 为什么不能用 return false 来阻止事件的默认行为？

	因为在事件处理函数中，返回值没有拿来做任务事情，函数依然会执行，并没有对event产生任何作用

5 react怎么通过dom元素，找到与之对应的 fiber对象的？

	React 16及以上版本中，React使用了一种名为Fiber的新的协调机制，用于实现异步渲染和增量更新。这个机制下每个组件都有一个对应的Fiber节点，用于描述它在渲染树中的位置、状态和生命周期等信息。

ReactDOM.findFiberNode(node)方法可以通过给定的DOM节点找到与之对应的Fiber节点。它的实现原理是，从给定的DOM节点开始遍历整个渲染树，查找该DOM节点所对应的Fiber节点。具体过程如下：

首先获取DOM节点的容器元素（root），以及该容器元素所对应的Fiber节点（rootFiber）。
根据容器元素的DOM结构，向下遍历整个DOM树，直到找到指定的DOM节点。
使用Fiber节点间的关系（sibling、child、return等）匹配当前DOM节点所对应的Fiber节点。
如果找到了该Fiber节点，则返回它；否则继续遍历后面的兄弟节点或父节点。
因此，ReactDOM.findFiberNode(node)方法可以帮助我们通过DOM节点快速地找到相应的Fiber节点，方便我们进行调试和性能优化等工作。

6 onClick是在冒泡阶段绑定的？ 那么onClickCapture就是在事件捕获阶段绑定的吗？

	是的，onClickCapture也是在事件冒泡阶段绑定的，只有少数的几个事件是在捕获阶段绑定的，例如scorll,focus,blur

7 react对事件是如何合成的
	通过不同的事件插件，来确定合成事件和原生事件的映射关系；同时也会通过构建初始化对象的方式，来确定合成事件和对应的事件处理插件关系


8 react事件是怎么绑定的（react事件绑定流程）
	1. 事件注册：初始化映射关系（react事件和原生事件之间的关系，合成事件和事件处理插件之间的关系）
	2. 事件绑定：在 diff dom的时候，如果发现了react合成事件，如onClick， 会根据映射关系找到对应的原生事件，之后在 document / root 上进行事件绑定，绑定统一的事件处理函数 dispatchEvent 。
	3. 事件触发：执行统一的事件处理函数dispatchEvent（根据真实事件对象找到 fiber对象，标记批处理更新）合成事件源对象，从事件源开始往上遍历对象找到是否有同类型的事件绑定，形成队列（如果是onClickCapture 会放在队列头部，onClick会放在队列尾部）， 然后执行队列，如果有发现阻止冒泡则跳出循环停止执行，（重置事件源放回事件池）


9 react事件触发流程
答案同时上

react v17版本的事件系统和react 16中有什么不同
1 事件绑定的位置不同，react16 事件统一绑定在document上；react17 事件统一绑定在root Element上
2 对齐原生浏览器事件
3 React 17 取消事件池复用

