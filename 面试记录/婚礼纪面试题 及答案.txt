1.singleSpa和qiankun的区别？为什么选择它？如何做样式隔离
	单独运行能力：singleSpa可以单独运行一个JavaScript应用程序，而qiankun需要一个主应用程序来管理。qiankun在可扩展性和功能模块方面表现更加出色，而singleSpa则更加适合那些需要单独运行的小型应用程序。
	singleSpa和qiankun都是用于管理和组合多个前端应用的框架，它们之间有一些区别和优势：

架构模式不同：singleSpa采用的是微前端架构模式，而qiankun则是基于微服务和浏览器端协议实现的“微前端”解决方案。因此在设计思路上有所不同。

适用场景不同：singleSpa适用于需要在多个前端应用之间共享代码、状态和UI布局等资源的项目，可以帮助开发者更好地解耦和复用代码。而qiankun则适用于提供一个整体性的解决方案，可以让开发者更加方便地进行多个独立子应用之间的组合和协作。

生态圈不同：singleSpa已经拥有相对成熟的生态圈，支持多种框架和库的使用。而qiankun则是由蚂蚁金服打造，其生态圈也越来越完善。

开发体验不同：singleSpa更加灵活和自由，但需要开发者手动控制应用程序的加载和卸载过程；而qiankun则提供了完整的API和组件化的开发方式，开发者只需专注于编写业务代码即可。

总的来说，singleSpa更加适合于大型复杂项目，提供了更高的灵活性和自由度；而qiankun则更加适合于中小型前端项目，提供了更好的开箱即用体验和完整的解决方案。
2.代码方面的优化和网络方面的优化
3.webpack的原理和机制？loader原理?plugin原理?自定义插件和loader
4.react源码 fiber是什么结构？如何理解fiber这样的结构？ dom diff过程 diff算法，怎么遍历，遍历过程? 

	React Fiber 是 React v16 中引入的新的协调方式，是一种基于链表数据结构的算法，用于实现更新过程的可中断和恢复执行。

简单来说，React Fiber 是一个用于增量更新虚拟DOM的算法。传统的虚拟DOM更新采用递归遍历节点的方式，当组件树比较庞大时，进行全量更新的时间成本就会变得非常高。而 React Fiber 通过将更新过程拆分成多个小任务（也就是所谓的工作单元），并且可以中断和恢复这些任务，从而可以更好地控制任务执行顺序和优先级。

React Fiber 的主要特点包括：

支持可中断和恢复的任务：Fiber 将更新任务划分为多个优先级不同的小任务，可以随时暂停和恢复任务的执行。
支持任务分片（work-in-progress）：Fiber 可以将多个小任务按照顺序拆分成多个 work-in-progress 阶段，每个阶段对应着一部分任务的更新过程，有利于提高整体更新的性能。
支持任务优先级：Fiber 可以根据任务的优先级来动态地调整任务执行顺序，从而保证高优先级任务的及时响应。
总之，React Fiber 算法可以帮助 React 在高度动态的环境下，更加灵活地处理更新，提高整体的渲染性能和用户体验。


	在React中，每次更新组件时，React会比较新旧虚拟DOM树的差异，并尽可能地更新只有变化的部分，以提高性能。这个过程被称为DOM diff。
DOM diff算法的原理是将新旧虚拟DOM树进行比较，找出需要更新的节点，并对其进行局部更新。其中，新旧两个虚拟DOM树的比较是基于节点的类型（元素节点、文本节点、函数组件等）和属性来进行的。
React的DOM diff算法采用了三种策略：同级比较、列表渲染时的Key优化和组件嵌套时的shouldComponentUpdate优化。

同级比较是指在比较新旧虚拟DOM树时，如果发现某个节点类型相同，并且该节点的位置也相同，则将其视为同一节点，不需要重新渲染。如果节点类型相同但位置不同，则需要进行移动操作；如果节点类型不同，则需要进行替换操作。

列表渲染时的Key优化是指在渲染列表时使用唯一的Key属性，以便快速地确定哪些节点需要更新、删除或增加。如果没有Key属性，那么React就需要遍历整个列表，逐个比较节点的位置和类型，以确定需要更新的节点。

组件嵌套时的shouldComponentUpdate优化是指在组件内部实现shouldComponentUpdate方法来控制是否需要更新组件。如果shouldComponentUpdate方法返回false，则React会跳过该组件及其子组件的更新操作。

总之，React的DOM diff算法是一个非常重要的优化手段，它可以在保证应用程序正确性的前提下，尽可能地减少不必要的DOM操作，提高应用程序的性能和用户体验。


5.react render阶段和commit阶段干了什么？useEffect属于哪个阶段
	React的render阶段和commit阶段是用来控制React组件更新的两个主要阶段。
	在render阶段中，React会执行以下步骤：
		1.执行函数组件或类组件的render方法，生成虚拟DOM树。
		2.根据新的虚拟DOM树和旧的虚拟DOM树进行Diff算法，找出需要更新的节点。
		3.生成更新队列。
	在commit阶段中，React会执行以下步骤：
		1.执行所有的生命周期方法、ref回调函数等副作用。
		2.根据更新队列对DOM进行实际的操作，比如添加、修改、删除元素等。
	useEffect属于React的副作用钩子函数，在组件渲染完成后被调用。因此，useEffect属于commit阶段。它可以让我们在每次组件更新时执行一些副作用操作，比如发送网络请求、修改DOM等
6.父组件更新导致子组件更新?React.pureComponent React.memo useMemo useCalllback 

7.react由老的结构变成新的fiber的形势，这种框架升级是为了解决什么问题
	React的升级到Fiber架构主要是为了解决以下几个问题：
长时间渲染阻塞：旧的结构中，当应用需要进行大量计算和更新时，可能会导致UI线程长时间被占用，从而出现长时间渲染阻塞的情况。这会影响用户体验，使得应用的性能变差。
灵活性不足：在旧的结构中，React只能进行单向的渲染，无法支持双向绑定等高级功能。这种缺陷使得开发者难以实现复杂的UI交互。
可维护性低：由于旧的结构中的组件树是静态的，因此难以进行动态修改。这使得代码的维护变得困难，尤其是在需要频繁更新UI的场景下。
	通过引入Fiber架构，React能够更好地解决以上问题，提升了应用的性能和灵活性，使得开发者可以更方便地维护和扩展React应用。

8.React 16之前的版本，React的协调机制是怎样的
	React 16之前的版本，React使用了一种名为Stack Reconciler（栈调和器）的协调机制，通过递归遍历组件树，并比对新旧节点来判断是否需要更新视图。这个过程是同步的，也就是说在进行渲染时不能中断，直到所有组件都被处理完毕。

具体过程如下：

React将组件树转换为虚拟DOM树（Virtual DOM Tree），并保存上一次渲染的虚拟DOM树。
遍历新的虚拟DOM树，在每个节点上执行以下操作： 
a. 如果该节点是组件节点，则递归执行以上步骤，直到找到最底层的子节点。 
b. 使用Diff算法比较当前节点和上一次渲染的节点，判断是否需要更新。 
c. 如果需要更新，则更新该节点及其子树对应的DOM节点。
将新的虚拟DOM树保存起来，以备下一次渲染使用。
这种协调机制虽然简单易懂，但是存在几个问题：

在组件树较大或者更新频繁的情况下，性能会受到很大影响。
在执行渲染过程中，无法中断，这可能导致用户体验不佳。
无法实现异步渲染和增量更新等功能，这在复杂应用中会限制前端性能的提升。
因此，React 16引入了Fiber架构，改变了之前的协调机制，并解决了上述问题。

9.Fiber架构为什么可以解决异步渲染和增量更新
Fiber架构通过对渲染过程的拆分和调度，使得React可以实现异步渲染和增量更新等功能。具体来说，Fiber架构有以下几个特点：

任务划分更细: Fiber架构将组件树的处理拆分为多个小任务（fiber），每个任务都只处理一小部分组件。这样，在更新一个大型组件树时，可以将其分解为多个小的任务，每个任务执行完后就让出控制权，这样不至于因为执行时间过长导致UI线程阻塞。

优先级调度: 在Fiber架构中，每个任务都有一个相应的优先级，React会根据优先级来决定哪些任务需要先执行。这样可以确保高优先级的任务能够尽快完成，并且在渲染用户可见内容时进行优先渲染，提高应用程序的响应速度。

可中断性: Fiber架构允许React在执行任务时中断、暂停和恢复。这意味着当需要执行其他任务时，React可以随时中断当前任务并返回控制权，然后在以后的时间继续该任务。这样可以使React更好地响应用户操作，提高应用程序的性能和流畅度。

增量更新: 在Fiber架构中，React能够只更新组件树中发生了改变的部分，而不是重新渲染整个组件树。这就是增量更新，它可以大大减少DOM操作和重绘，从而提高应用程序的性能。

因此，Fiber架构通过对渲染过程的优化和改进，使得React能够更好地处理大型组件树、异步渲染和增量更新等问题，提高了应用程序的响应速度、性能和流畅度。

10.React 16之前的版本和之后的版本，Dom diff有什么不同
在React 16之前的版本中，React使用了一种名为Stack Reconciler（栈调和器）的协调机制，通过递归遍历组件树，并比对新旧节点来判断是否需要更新视图。在这个过程中，React会执行完整的DOM Diff算法（即：Virtual DOM 比对），得出每个节点的差异，并在下一次渲染时重新渲染这些有变化的节点，以保证视图和数据的同步。

而在React 16中，React引入了一种名为Fiber架构的新的协调机制，使得React能够实现异步渲染、增量更新等功能。在Fiber架构中，React将渲染过程分成了多个阶段，每个阶段都只处理一个小的任务单元，可以中断或恢复该任务。同时，React使用了一种名为Incremental DOM Diff算法的新的Diff算法，它不再需要完整地比较整棵DOM树，而是只比较新旧节点的差异，从而提高了性能。

具体来说，Incremental DOM Diff算法的主要思想是，将DOM生成和DOM操作分离开来。在首次渲染时，React会创建一份完整的虚拟DOM树，并将其转换为真实DOM树。当进行后续更新时，React会先创建新的虚拟DOM树，然后通过对比新旧虚拟DOM树，生成一份描述所需修改的DOM操作清单，最后批量地将这些操作应用到真实DOM树上，从而更新视图。

总之，两种版本的Dom Diff算法本质上是一样的，但Fiber架构中使用的Incremental DOM Diff算法在性能和功能方面都有了大幅度的提升。它可以更快地识别需要更新的节点，减少重复计算和DOM操作，同时还可以实现增量更新、异步渲染和流畅度控制等高级特性

11.举一个实际开发的例子，来表示Fiber架构允许React在执行任务时中断、暂停和恢复
假设在实际开发中，我们需要渲染一个非常复杂的组件树，并且这个组件树中包含了很多图片和视频等资源。如果一次性将整个组件树渲染出来，可能会导致用户等待时间过长，造成页面卡顿或者崩溃。

在Fiber架构下，我们可以使用异步渲染方式，以让React将组件树的处理拆分为多个小任务（fiber），每个任务都只处理一小部分组件，从而避免长时间占用主线程。

具体来说，我们可以将组件树的渲染过程拆分为多个阶段。例如，先渲染第一屏内容，再异步加载下一屏内容，等到下一屏内容加载完毕后再继续渲染。这样，即使用户在等待下一屏内容加载时执行了其他操作，也不会对应用程序造成影响。

另外，在Fiber架构中，React还支持中断、暂停和恢复渲染过程。例如，在渲染一大块DOM内容时，如果该任务正在执行时，用户滚动到页面底部需要加载新的数据，React就可以中断当前任务，并立即开始处理新的任务。当新任务完成后，React再回到之前的任务状态，继续进行渲染。

这种方式可以使得React更好地响应用户操作，提高应用程序的性能和流畅度。

12.react时间分片
React时间分片（Time Slicing）是一种实现增量渲染的技术，可以将大的更新任务拆分成多个小的任务，按照优先级和时间片的方式逐步执行，以避免长时间的JavaScript运行导致界面卡顿或无响应。

React的时间分片机制依赖于浏览器的requestIdleCallback API，该API会在浏览器空闲时调用回调函数。React将更新任务划分为多个小任务，每个小任务被封装成一个Fiber对象，并根据任务的优先级和剩余可用时间块来确定任务的执行顺序，然后将这些小任务提交到requestIdleCallback中执行。如果任务没有足够的时间来完成，React会将任务暂停，并等待下次空闲时继续执行。

React时间分片可以提高组件的渲染性能，特别是在处理大型列表和复杂数据结构时，可以使页面更加流畅，并减少CPU使用率。同时，React还提供了Suspense和lazy等API来进一步优化渲染性能，使得Web应用程序更加快速响应和用户友好。

